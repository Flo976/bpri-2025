function offsetTop(e,t=0){for(;e;)t+=e.offsetTop,e=e.offsetParent;return t}class Parallax{constructor(e){this.element=e,this.options=this.parseAttribute(),this.elementY=0,this.scrollY=window.scrollY,this.resizeTimeout=null,this.onScroll=this.onScroll.bind(this),this.onResize=this.onResize.bind(this),this.onIntersection=this.onIntersection.bind(this),this.setupObserver(),this.calculateElementPosition(),this.onScroll()}parseAttribute(){var e={y:0,rotate:0,divisor:2,variable:!1,is_parent_overflow_hidden:!1};try{return{...e,...JSON.parse(this.element.dataset.parallax)}}catch{return{...e,y:parseFloat(this.element.dataset.parallax)}}}setupObserver(){this.options.is_parent_overflow_hidden?(document.addEventListener("scroll",this.onScroll,{passive:!0}),window.addEventListener("resize",this.onResize)):new IntersectionObserver(this.onIntersection).observe(this.element)}calculateElementPosition(){this.elementY=offsetTop(this.element)+this.element.offsetHeight/this.options.divisor}onIntersection(e){for(const t of e)t.isIntersecting?(document.addEventListener("scroll",this.onScroll,{passive:!0}),window.addEventListener("resize",this.onResize),this.calculateElementPosition()):(document.removeEventListener("scroll",this.onScroll),window.removeEventListener("resize",this.onResize))}onResize(){clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout(()=>{this.calculateElementPosition(),this.onScroll()},100)}onScroll(){var e=window.scrollY;this.scrollY!==e&&(this.scrollY=e,window.requestAnimationFrame(()=>{var t=this.scrollY+window.innerHeight/this.options.divisor,t=this.elementY-t,s=-1*t*this.options.y;if(this.options.variable)this.element.style.setProperty("--parallaxY",s+"px");else{let e=`translateY(${s}px)`;this.options.rotate&&(e+=` rotate(${t*this.options.rotate}deg)`),this.element.style.setProperty("transform",e)}}))}static bind(){return Array.from(document.querySelectorAll("[data-parallax]")).map(e=>new Parallax(e))}}

// Initialiser quand le DOM est chargÃ©
window.addEventListener('load', () => {
	Parallax.bind()
});